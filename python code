import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import time
import random

# Replace these with your actual sensor readings
def get_temperature():
    # Simulate a temperature sensor reading
    return random.uniform(15, 30)

def get_humidity():
    # Simulate a humidity sensor reading
    return random.uniform(40, 80)

def get_soil_moisture():
    # Simulate a soil moisture sensor reading
    return random.uniform(10, 50)

def check_temperature(temp):
    if temp >= 20 and temp <= 25:
        return "Optimal"
    elif temp < 20:
        return "Too Low"
    else:
        return "Too High"

def check_humidity(humidity):
    if humidity >= 60 and humidity <= 70:
        return "Optimal"
    elif humidity < 60:
        return "Too Low"
    else:
        return "Too High"

def check_soil_moisture(soil_moisture):
    if soil_moisture >= 20 and soil_moisture <= 30:
        return "Optimal"
    elif soil_moisture < 20:
        return "Too Low"
    else:
        return "Too High"

# Create an empty dataframe to store the data
data = pd.DataFrame(columns=['Date', 'Temperature (째C)', 'Humidity (%)', 'Soil Moisture (%)', 'Temperature Status', 'Humidity Status', 'Soil Moisture Status'])

# Set the frequency of data collection (e.g., every 1 minute)
frequency = 60  # in seconds

while True:
    # Get the current time
    date = pd.to_datetime('now')

    # Get the current sensor readings
    temperature = get_temperature()
    humidity = get_humidity()
    soil_moisture = get_soil_moisture()

    # Create a new row of data
    new_row = pd.DataFrame({
        'Date': [date],
        'Temperature (째C)': [temperature],
        'Humidity (%)': [humidity],
        'Soil Moisture (%)': [soil_moisture],
        'Temperature Status': [check_temperature(temperature)],
        'Humidity Status': [check_humidity(humidity)],
        'Soil Moisture Status': [check_soil_moisture(soil_moisture)]
    })

    # Append the new row to the dataframe
    data = pd.concat([data, new_row], ignore_index=True)

    # Print the updated dataframe
    print(data)

    # Plot the data
    plt.figure(figsize=(12, 6))
    plt.subplot(1, 3, 1)
    plt.plot(data['Date'], data['Temperature (째C)'], label='Temperature')
    plt.plot(data['Date'], [20] * len(data), label='Optimal Temperature', linestyle='--')
    plt.plot(data['Date'], [25] * len(data), label='Optimal Temperature', linestyle='--')
    plt.legend()
    plt.xlabel('Date')
    plt.ylabel('Temperature (째C)')
    plt.title('Temperature')

    plt.subplot(1, 3, 2)
    plt.plot(data['Date'], data['Humidity (%)'], label='Humidity')
    plt.plot(data['Date'], [60] * len(data), label='Optimal Humidity', linestyle='--')
    plt.plot(data['Date'], [70] * len(data), label='Optimal Humidity', linestyle='--')
    plt.legend()
    plt.xlabel('Date')
    plt.ylabel('Humidity (%)')
    plt.title('Humidity')

    plt.subplot(1, 3, 3)
    plt.plot(data['Date'], data['Soil Moisture (%)'], label='Soil Moisture')
    plt.plot(data['Date'], [20] * len(data), label='Optimal Soil Moisture', linestyle='--')
    plt.plot(data['Date'], [30] * len(data), label='Optimal Soil Moisture', linestyle='--')
    plt.legend()
    plt.xlabel('Date')
    plt.ylabel('Soil Moisture (%)')
    plt.title('Soil Moisture')

    plt.tight_layout()
    plt.show()
